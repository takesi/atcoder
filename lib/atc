#!/bin/bash -e

function usage() {
  echo "usage: atc {login,l,download,dl,d,test,t,p,py,c,clean} ..."
  echo ""
  echo "command arguments:"
  echo ""
  echo "    login (l)                              login to atcoder"
  echo ""
  echo "    download (d, dl) contest [tasks]       download sample cases"
  echo "            contest : contest name e.g. 'abc100'"
  echo "                      if you use '.' it will auto detect from current path"
  echo "            tasks   : task names e.g. 'a' or 'a-d'. download all tasks if not given"
  echo ""
  echo "    test (t,p,py) task [samples]           test a task (c++ or python)"
  echo "            task    : task name e.g. 'a'"
  echo "            samples : sample names e.g. '123' or '1-4'. run all samples if not given"
  echo ""
  echo "    clean (c)                              delete all sample cases"
}

base_url="https://atcoder.jp/"
cmd="./a.out"

case "$1" in
  "l" | "login")
    oj login ${base_url}
    ;;
  "d" | "dl" | "download")
    shift
    if [ "$1" == "-w" ]; then
      html=yes
      shift
    fi
    contest=$1
    if [ -z "${contest}" ]; then
      usage
      exit 1
    fi
    if [ "${contest}" == "." ]; then
      name=$(pwd)
      if [[ ${name} =~ /([a-zA-Z0-9\-]+)$ ]]; then
        contest=${BASH_REMATCH[1]}
        echo "Extract contest ${contest} from path"
      fi
    fi
    shift
    tasks=$(atc-tasks ${contest} $1)
    for task in ${tasks}
      do
      regexp="([a-z]),(.*)$"
      if [[ ${task} =~ $regexp ]]; then
        task=${BASH_REMATCH[1]}
        url=${BASH_REMATCH[2]}
        printf "[\e[34;1mDownloading ${task} samples\e[m]\n"
        oj dl -s -d . -f "${task}.%i.%e" ${url}
        for file in ${task}.[1-9].in
          do
          mv ${file} ${file/.in/}
        done
        for file in ${task}.[1-9].out
          do
          echo [ans] >> ${file/.out/}
          cat ${file} >> ${file/.out/}
          rm ${file}
        done
        if [ "$html" == "yes" ]; then
          wget ${url} -O ${task}.html
        fi
      fi
    done
    ;;
  "t" | "test")
    shift
    task=$1
    if [ -z "${task}" ]; then
      usage
      exit 1
    fi
    shift
    samples=$1
    if [ -z "${samples}" ]; then
      samples=1-9
    fi
    if [ ! -e "${cmd}" ]; then
      echo "No execution file ${cmd}"
      exit 1
    fi
    for file in ${task}.[$samples]
      do
      printf "[\e[34;1m${file}\e[m]\n"
      if [ "${samples}" == "1-9" ]; then
        ${cmd} < ${file} 2>/dev/null
      else
        ${cmd} < ${file}
      fi
      printf "[\e[35;1mans\e[m]\n"
      atc-ans ${file}
      echo ""
    done
    ;;
  "p" | "py")
    shift
    task=$1
    if [ -z "${task}" ]; then
      usage
      exit 1
    fi
    shift
    samples=$1
    if [ -z "${samples}" ]; then
      samples=1-9
    fi
    for file in ${task}.[$samples]
      do
      printf "[\e[34;1m${file}\e[m]\n"
      python3 ${task}.py < ${file}
      printf "[\e[35;1mans\e[m]\n"
      atc-ans ${file}
      echo ""
    done
    ;;
  "c" | "clean")
    for file in [a-z].[1-9]
      do
      rm ${file}
      if [ -e "${file}.ans" ]; then
        rm ${file}.ans
      fi
    done
    for file in [a-z].html
      do
      rm ${file}
    done
    ;;
  *)
    usage
    ;;
esac
